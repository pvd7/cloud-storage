Как организовать клиент-серверное взаимодействие?
Как и в каком виде передавать файлы?
Как пересылать большие файлы?
Как пересылать служебные команды?
Что хранить в базе данных?
Как передавать структуру каталогов/файлов?

Полезные ссылки:
    Netty фициальный сайт
    https://netty.io

    Высокопроизводительный NIO-сервер на Netty
    https://habr.com/post/136456/

    Netty\Java - асинхронный событийно ориентированный сетевой фреймворк
    http://galiego710.blogspot.com/2012/05/netty-asynchronous-event-driven-network.html


Спецификация.

    Для клиент-серверного взаимодействий используем библиотеку Netty.

    Создаем канал для служебных команд, канал всегда открыт.

    После создания канала сначала делаем проверку токена JWT (JSON Web Token).
    если не успех, возвращаем ошибку авторизации и закрываем канал.
    Клиент должен обновить токен через специальный сервис.

    На сервере предусмотреть возможность закрывать каналы, если авторизации не было больше некоторого времени,
    чтобы клиент не мог создавать неограниченное количество каналов.

    Получение клиентом JWT необходимо делать через другой сервис по защищенному каналу,
    например специальный сервис авторизации.

    При передачи файла создаем столько каналов сколько разрешено в настройках для каждого клиента.
    После передачи файла и его обработаки канал можно закрыть, зачем деаржать канал если файл не загружаем\скачиваем?)

    По служебному и рабочим канал передаем сериализованые объекты.

    После предачи всех частей файла он собирается в исходный файл.
    Находим хеш файла (SHA-1) и смотрим есть ли файл с таким хешем в хранилище,
    если есть? то удаляем файл, иначе сохраняем его в файловом хранилище на диске.
    В таблицы UserFiles и FileStorage сохраняем информацию о файле, а клиенту
    возвращаем UUID записи из таблицы UserFiles

    Файловое хранилище (ФХ):
    При сохранении файла на диск берем из настроек partX куда сейчас можно записать файл.
    Например если hash SHA-1: F777CE63EDC87B77BF3B2C0945DFEB9AA63E9B4C
    тогда получаем путь partX/F7/77/CE/63/ED/C8/
    полное имя файла partX/F7/77/CE/63/ED/C8/7B77BF3B2C0945DFEB9AA63E9B4C

    БД SQLite:
    table UserFiles {
        Id bigint // ID записи
        UUID uuid // глобальный уникальный идентификатор записи
        ParentId bigint FK on UserFiles.Id // ссылка на родителя, для структры каталогов пользователей
        Type int // тип записи, где 0 - каталог, 1 - файл
        UserUUID UUID // UUID пользователя
        Name String(128) // имя файла
        FileStorageId bigint FK on FileStorage.Id // ссылка
    }

    table FileStorage {
        Id bigint // ID записи
        Hash String(128) // SHA-1
        Path String(512) // путь до файла (partX/F7/77/CE/63/ED/C8/7B77BF3B2C0945DFEB9AA63E9B4C)
        Size bigint // размер файла
    }

    Структуру каталогов и файлов можно передвать через служебный канал, данных там немного.
    object File {
        UUID uuid // глобальный уникальный идентификатор записи
        ParentId bigint // ссылка на родителя, для структры каталогов пользователей
        Type int // тип записи, где 0 - каталог, 1 - файл
        Name String(128) // имя файла
        Size bigint // размер файла
    }





